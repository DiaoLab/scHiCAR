shell.prefix("set -eo pipefail; echo BEGIN at $(date); ")
shell.suffix("; exitstat=$?; echo END at $(date); echo exit status was $exitstat; exit $exitstat")
import collections
configfile: "config.yaml"

FILES = json.load(open(config['SAMPLES_JSON'])) ##  fastq for each lane
SAMPLES = sorted(FILES.keys())
TARGETS = []
tmp='./tmp'

TARGETS.extend(expand("05_ME_fq/{sample}_cutbind_cutME_L001_R2_001.fastq.gz",sample = SAMPLES ))

localrules: targetfiles, read_info_summary
rule targetfiles:
    input: TARGETS

## run for each fastq pairs individually. 

rule raw_fq_trim:
    input:
        r1 = lambda wildcards: FILES[wildcards.sample]['R1'],
        r2 = lambda wildcards: FILES[wildcards.sample]['R2']
    output: 
        r1 = "01_raw_fq_update/{sample}_index_L001_R1_001.fastq",
        r2 = "01_raw_fq_update/{sample}_index_L001_R2_001.fastq"
    script:
        "script/raw_fq_update.py"

rule barcode_QC: ## extract total barcodes list
    input: "01_raw_fq_update/{sample}_index_L001_R1_001.fastq"
    output: "02_barcode_info/{sample}_raw_barcode_count.txt"
    threads: 8 
    shell:
        """
        awk  '{{if(NR%4==1) print substr($0,2,28)}}' {input} | sort --parallel={threads} --temporary-directory={tmp}  | uniq -c | sort -nr   > {output} 
        """

rule find_right_barcodes: # mismatch correction for each barcode
    input: "02_barcode_info/{sample}_raw_barcode_count.txt"
    output: sum = "02_barcode_info/{sample}.barcode_final_summary",
            map = "02_barcode_info/{sample}.barcode_final_map",
            log = "02_barcode_info/{sample}.barcode_log"
    script:
        "script/barcode_hash_v2.py"


rule read1_barcode_correction:
    input :
        "01_raw_fq_update/{sample}_index_L001_R1_001.fastq",
        "02_barcode_info/{sample}.barcode_final_map"
    output :
        "03_corrected_fq/{sample}_L001_R1_001.fastq"
    log: "00_log/{sample}_L001_R1_corrected.log"
    script:
        "script/fq_barcode_correction.py"

rule read2_barcode_correction:
    input :
        "01_raw_fq_update/{sample}_index_L001_R2_001.fastq",
        "02_barcode_info/{sample}.barcode_final_map"
    output :
        "03_corrected_fq/{sample}_L001_R2_001.fastq"
    log:"00_log/{sample}_L001_R2_corrected.log"   
    script:
        "script/fq_barcode_correction.py"

rule r1_zip:
    input  : "03_corrected_fq/{sample}_L001_R1_001.fastq"
    output : temp("03_corrected_fq/{sample}_L001_R1_001.fastq.gz")
    threads: 11
    shell:
        "pigz -p {threads} {input}"

rule r2_zip:
    input  : "03_corrected_fq/{sample}_L001_R2_001.fastq"
    output : temp("03_corrected_fq/{sample}_L001_R2_001.fastq.gz")
    threads: 11
    shell:
        "pigz -p {threads} {input}"

rule bind:
    input:
        "03_corrected_fq/{sample}_L001_R1_001.fastq.gz",
        "03_corrected_fq/{sample}_L001_R2_001.fastq.gz"
    output:
        temp("04_bind_fq/{sample}_cutbind_L001_R1_001.fastq.gz"),
        temp("04_bind_fq/{sample}_cutbind_L001_R2_001.fastq.gz")
    threads: 16
    shell:
        """
        cutadapt -Z -j {threads} -e 0.2  -g file:bind_index\
        -o 04_bind_fq/{wildcards.sample}_cut{{name}}_L001_R1_001.fastq.gz \
        -p 04_bind_fq/{wildcards.sample}_cut{{name}}_L001_R2_001.fastq.gz \
        {input[0]}  {input[1]}  
        """

rule ME:
    input:
        "04_bind_fq/{sample}_cutbind_L001_R1_001.fastq.gz",
        "04_bind_fq/{sample}_cutbind_L001_R2_001.fastq.gz"
    output:
        "05_ME_fq/{sample}_cutbind_cutME_L001_R1_001.fastq.gz",
        "05_ME_fq/{sample}_cutbind_cutME_L001_R2_001.fastq.gz"
    threads: 16
    shell:
        """
        cutadapt -Z -j {threads} -e 0.2  -g file:ME_index\
        -o 05_ME_fq/{wildcards.sample}_cutbind_cut{{name}}_L001_R2_001.fastq.gz \
        -p 05_ME_fq/{wildcards.sample}_cutbind_cut{{name}}_L001_R1_001.fastq.gz \
        {input[1]}  {input[0]}  
        """
